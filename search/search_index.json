{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Functional DotNet Tutorial","text":"<p>Esse \u00e9 um pequeno tutorial sobre interoperabilidade entre F# e C# no ambiente .net.</p> <p>A ideia \u00e9 produzir uma aplica\u00e7\u00e3o simples que integra uma biblioteca escrita em linguagem funcional (F#) com uma aplica\u00e7\u00e3o escrita em C#.</p> <p>Isso permite isolar os efeitos colaterais no lado do C# e manter as fun\u00e7\u00f5es puras do lado do F#.</p> <p>O primeiro passo \u00e9 preparar todo o ambiente para come\u00e7ar a escrever a aplica\u00e7\u00e3o.</p>"},{"location":"#preparacao","title":"Prepara\u00e7\u00e3o","text":"<p>Instalar o .net SDK (preferencialmente no WSL):</p> <pre><code>sudo add-apt-repository ppa:dotnet/backports\nsudo apt-get update &amp;&amp; \\\n  sudo apt-get install -y dotnet-sdk-9.0\n</code></pre> <ul> <li>Criar um reposit\u00f3rio no GitHub e rodar:</li> </ul> <pre><code>dotnet new sln -n LoanService\ndotnet new classlib -lang F# -o LoanRules\ndotnet new console -lang C# -o LoanApp\n\ndotnet sln add LoanRules/LoanRules.fsproj\ndotnet sln add LoanApp/LoanApp.csproj\ndotnet add LoanApp/LoanApp.csproj reference LoanRules/LoanRules.fsproj\n</code></pre> <p>Isso ir\u00e1 criar uma <code>Solution</code> na raiz do reposit\u00f3rio com dois projetos: - LoanApp: um <code>Console Application</code> em C# - LoanRules: uma <code>Lib</code> em F#</p> <p>Em ambos os casos, os projetos s\u00e3o previamente preenchidos com c\u00f3digo de exemplo.</p>"},{"location":"#testando-a-solucao","title":"Testando a solu\u00e7\u00e3o","text":"<pre><code>dotnet run --project LoanApp\n</code></pre> <p>Deve aparecer algo:</p> <p></p> <p>Esse \u00e9 o programa padr\u00e3o quando criado um programa do tipo <code>Console Application</code>.</p> <p>Nas pr\u00f3xima etapa vamos integrar a biblioteca com o programa em C#.</p>"},{"location":"cap1/","title":"Integrando o F#","text":"<p>Abra o arquivo <code>Library.fs</code> no projeto <code>LoadRules</code>. Ele ter\u00e1 um c\u00f3digo de exemplo a seguir:</p> <pre><code>namespace LoanRules\n\nmodule Say =\n    let hello name =\n        printfn \"Hello %s\" name\n</code></pre> <p><code>namespace</code> \u00e9 autoexplicativo e indica como \u00e9 a hierarquia da bibllioteca.</p> <p>Dentro do <code>namespace</code> h\u00e1 um m\u00f3dulo chamado <code>Say</code> e uma fun\u00e7\u00e3o chamada <code>hello</code> com um argumento.</p> <p>Essa fun\u00e7\u00e3o n\u00e3o \u00e9 pura devido ao print embutido dentro dela.</p>"},{"location":"cap1/#primeiro-passo","title":"Primeiro Passo","text":"<p>Sem modificar a biblioteca ainda, vamos tentar realizar a chamada dessa fun\u00e7\u00e3o no C# e fazer com que ela imprima o resultado no terminal.</p> <p>Ao abrir o arquivo <code>Program.cs</code>, voc\u00ea notar\u00e1 que possui apenas um print:</p> <pre><code>Console.WriteLine(\"Hello, World!\");\n</code></pre> <p>Apague essa linha e fa\u00e7a a chamada de fun\u00e7\u00e3o da biblioteca:</p> <pre><code>using LoanRules; // reference F# DLL\n\n// Call function hello in module Say in LoanRules\nSay.hello(\"John Doe\");\n</code></pre> <p>Apesar da fun\u00e7\u00e3o estar em F#, a sintaxe a ser utilizada deve ser a do C#, que \u00e9 an\u00e1loga ao do Java.</p> <p>A integra\u00e7\u00e3o dentro do ambiente .net \u00e9 autom\u00e1tica e transparente. Ao rodar a aplica\u00e7\u00e3o, a solu\u00e7\u00e3o monta ambos os projetos e preparam o c\u00f3digo em .net IL para executar na Virtual Machine. Para o C#, a biblioteca n\u00e3o \u00e9 em F#, mas em uma representa\u00e7\u00e3o intermedi\u00e1ria que \u00e9 acess\u00edvel por todo o ecoessistema .net. </p> <p>Essa interoperabilidade \u00e9 muito produtiva para aplica\u00e7\u00f5es complexas, com diversos times trabalhando na solu\u00e7\u00e3o, isolando as atribui\u00e7\u00f5es de cada grupo e sem problemas ou camadas de integra\u00e7\u00e3o.</p>"},{"location":"cap1/#isolando-o-side-effect","title":"Isolando o side-effect","text":"<p>Vamos agora tornar a fun\u00e7\u00e3o pura e jogar o efeito colateral para o C#.</p> <p>Exerc\u00edcio 1:</p> <p>Modifique a fun\u00e7\u00e3o hello para receber uma string e retornar uma string, concatenando o prefixo \"Hello, \" no argumento.</p> <p>Exerc\u00edcio 2:</p> <p>Modifique o arquivo Program.cs para chamar a fun\u00e7\u00e3o na biblioteca e imprimir o resultado.</p>"},{"location":"cap2/","title":"Programando o F#","text":"<p>Vamos come\u00e7ar escrevendo uma biblioteca em F# para um caso de Credit Allowance.</p> <p>A ideia \u00e9 criar fun\u00e7\u00f5es puras em F# que v\u00e3o suportar a aplica\u00e7\u00e3o, n\u00e3o importanto qual a plataforma de intera\u00e7\u00e3o com o usu\u00e1rio. Al\u00e9m das fun\u00e7\u00f5es, \u00e9 poss\u00edvel tamb\u00e9m manter os <code>Records</code> na biblioteca.</p> <p>A sintaxe de F# \u00e9 muito parecido com OCaml, com algumas pequenas diferen\u00e7as. Por exemplo, usa-se <code>PascalCase</code> em F#, enquanto que em OCaml, \u00e9 usado <code>snake_case</code>.</p> <p>O projeto <code>LoadRules</code> cria automaticamente o arquivo Library.fs. Vamos utilizar esse mesmo arquivo para escrever o c\u00f3digo, mantendo uma estrutura b\u00e1sica</p>"},{"location":"cap2/#records","title":"Records","text":"<p>Vamos come\u00e7ar com o record que representa o cliente. Essa estrutura ir\u00e1 armazenar dados como idade, proventos e score de cr\u00e9dito:</p> <p>Customer: - Age: int - Income: float - CreditScore: int</p> <p>Voc\u00ea pode criar o Record de forma an\u00e1loga a feita em OCaml, mas lembrando que precisa ser em PascalCase:</p> <pre><code>type Customer = {\n    Age: int\n    Income: float\n    CreditScore: int\n}\n</code></pre> <p>Exerc\u00edcio 1:</p> <p>Crie agora um novo <code>Record</code> chamado <code>Loan</code> com 3 campos: <code>Amount</code>, <code>InterestRate</code> e <code>TermMonths</code>. Os dois primeiros s\u00e3o <code>float</code> e o \u00faltimo \u00e9 inteiro.</p> <p>Exerc\u00edcio 2:</p> <p>Crie um <code>Record</code> chamado <code>LoanRequest</code> com 2 campos: <code>Customer</code> e <code>Loan</code>.</p> <p>A nova estrutura ir\u00e1 conter os dados referentes a um empr\u00e9stimo em espec\u00edfico.</p>"},{"location":"cap2/#functions","title":"Functions","text":"<p>Por \u00faltimo vamos substituir o m\u00f3dulo atual por um novo m\u00f3dulo chamado <code>Elegibility</code>. Dentro colocaremos uma \u00fanica fun\u00e7\u00e3o por enquanto chamada <code>isEligible</code>. Essa fun\u00e7\u00e3o ir\u00e1 receber um record referente ao usu\u00e1rio e um record referente ao empr\u00e9stimo e retorna um <code>boolean</code>.</p> <p>A regra de neg\u00f3cio \u00e9 para aprova\u00e7\u00e3o do empr\u00e9stimo (retorno true):</p> <ul> <li>Se o usu\u00e1rio tem 18 anos ou mais</li> <li>Se a renda \u00e9 maior ou igual ao dobro do valor do empr\u00e9stimo</li> <li>Se o score de cr\u00e9dito \u00e9 superior a 649</li> </ul> <p>Exerc\u00edcio 3:</p> <p>Codificar a fun\u00e7\u00e3o acima no m\u00f3dulo</p>"},{"location":"cap2/#integracao","title":"Integra\u00e7\u00e3o","text":"<p>Na integra\u00e7\u00e3o entre as plataformas, o <code>Record</code> se tornar\u00e1 algo parecido com uma classe com um construtor autom\u00e1tico contendo todos os campos.</p> <p>Logo, \u00e9 poss\u00edvel construir objetos em C# usando o Record declarado em F#:</p> <pre><code>var customer = new Customer(30, 60000, 700);\n</code></pre> <p>O \u00fanico detalhe principal \u00e9 que a ordem declarada precisa ser mantida no construtor, ao contr\u00e1rio do OCaml que permitia qualquer ordem.</p> <p>Exerc\u00edcio 4:</p> <p>Reescreva o programa em C# para realizar a chamada da nova fun\u00e7\u00e3o.</p>"},{"location":"cap3/","title":"Criando uma API REST","text":"<p>Pr\u00f3ximo passo agora \u00e9 criar uma API REST em C# para expor um endpoint que consome o m\u00e9todo da biblioteca.</p> <p>Devido ao ambiente .net, \u00e9 poss\u00edvel fazer tudo em F#, contudo \u00e9 muito mais pr\u00e1tico faz\u00ea-lo em C#. Esse isolamento soma o melhor de cada linguagem.</p>"},{"location":"cap3/#criar-um-projeto-loanapi","title":"Criar um projeto LoanAPI","text":"<p>O primeiro passo \u00e9 criar um novo projeto chamado LoanAPI. Em C# n\u00e3o podemos simplesmente substituir o c\u00f3dido em LoanApp para rodar a aplica\u00e7\u00e3o no terminal, como em Python. \u00c9 preciso preparar o projeto para expor os endpoints via webserver.</p> <pre><code>dotnet new webapi -n LoanApi\ndotnet add LoanApi/LoanApi.csproj reference LoanRules/LoanRules.fsproj\n</code></pre> <p>Para testar, voc\u00ea pode rodar:</p> <pre><code>dotnet run --project LoanApi\n</code></pre> <p>Isso ir\u00e1 rodar o webserver e expor os endpoints em: localhost</p>"},{"location":"cap3/#montando-a-api-rest","title":"Montando a API REST","text":"<p>Alterar o arquivo <code>LoanApi.http</code> para o endpoint correto: /loan/</p> <p>Alterar o arquivo <code>Program.cs</code> do Projeto LoanApi:</p> <pre><code>using LoanRules; // reference F# DLL\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\n\napp.MapPost(\"/loan\", (LoanRequest request) =&gt;\n{\n\n    //Implement:\n\n    // Create a Customer record from request\n    // Create a Loan record from request\n    // Call the F# function to check eligibility\n    // Note: The F# function is static and can be called directly\n\n    bool eligible = true; // Call the F# function here\n\n    return Results.Ok(new\n    {\n        LoanEligibility = eligible ? \"Approved\" : \"Denied\"\n    });\n})\n.WithName(\"PostLoan\")\n.WithOpenApi();\n\napp.Run();\n</code></pre> <p>Testar usando usando uma chamada com o verbo post:</p> <pre><code>curl -X POST http://localhost:5189/loan   -H \"Content-Type: application/json\"   -d '{\n    \"customer\": {\n      \"age\": 30,\n      \"income\": 60000.0,\n      \"creditScore\": 700\n    },\n    \"loan\": {\n      \"amount\": 20000.0,\n      \"interestRate\": 5.5,\n      \"termMonths\": 60\n    }\n  }' -k\n</code></pre>"},{"location":"cap4/","title":"Para ir al\u00e9m","text":"<p>Voc\u00ea pode agora colocar outras fun\u00e7\u00f5es na biblioteca e complementar o payload de retorno do endpoint:</p> <ol> <li>Fun\u00e7\u00e3o que retorna as parcelas por tabela SAC</li> <li>Fun\u00e7\u00e3o que retorna as parcelas por tabela Price</li> <li>Fun\u00e7\u00e3o que calcula o valor de um colateral em caso de hipoteca</li> <li>Fun\u00e7\u00e3o que calcula o valor de um leasing baseado em entrada e parcela final</li> </ol> <p>Ou qualquer outra feature dos modelos de empr\u00e9stimo.</p>"},{"location":"cap4/#a-cereja-do-bolo","title":"A Cereja do Bolo","text":"<p>Para quem gosta de tecnologias vintage:</p> <p>Linux:</p> <pre><code>dotnet new install Avalonia.Templates\ndotnet new avalonia.app -n LoanApp.Avalonia\ndotnet run --project LoanApp.Avalonia\n</code></pre> <p>Esse \u00e9 um projeto derivado das aplica\u00e7\u00f5es <code>Windows Forms</code>. O .net j\u00e1 havia um novo modelo mais moderno chamado XAML para a constru\u00e7\u00e3o de telas client-size, e Avalonia \u00e9 uma portabilidade para outras plataformas, como Linux.</p> <p>Vamos alterar alguns arquivos no projeto para utilizar a biblioteca do F#. Primeiro adicionar a refer\u00eancia \u00e0 biblioteca:</p> <pre><code>dotnet add LoanApp.Avalonia/LoanApp.Avalonia.csproj reference LoanRules/LoanRules.fsproj\n</code></pre> <p>Agora, alterar os arquivos:</p> <ul> <li>Arquivo: <code>MainWindow.axaml.cs</code></li> </ul> <pre><code>using Avalonia.Controls;\nusing Avalonia.Interactivity;\nusing LoanRules; // reference F# DLL\n\nnamespace LoanApp.Avalonia;\n\npublic partial class MainWindow : Window\n{\n    public MainWindow()\n    {\n        InitializeComponent();\n        this.WindowStartupLocation = WindowStartupLocation.CenterScreen;\n    }\n    private void SubmitButton_Click(object? sender, RoutedEventArgs e)\n        {\n            var age = this.FindControl&lt;TextBox&gt;(\"AgeTextBox\").Text;\n            var income = this.FindControl&lt;TextBox&gt;(\"IncomeTextBox\").Text;\n            var score = this.FindControl&lt;TextBox&gt;(\"ScoreTextBox\").Text;\n\n            var amount = this.FindControl&lt;TextBox&gt;(\"AmountTextBox\").Text;\n            var rate = this.FindControl&lt;TextBox&gt;(\"RateTextBox\").Text;\n            var term = this.FindControl&lt;TextBox&gt;(\"TermTextBox\").Text;\n\n            var customer = new Customer(\n                int.Parse(age), \n                double.Parse(income), \n                int.Parse(score));\n\n            // Create a Loan record\n            var loan = new Loan(\n                double.Parse(amount), \n                double.Parse(rate), \n                int.Parse(term));\n\n            // Call the F# function to check eligibility\n            // Note: The F# function is static and can be called directly\n            bool eligible = Eligibility.isEligible(customer, loan);\n            var result = eligible ? \"Approved\" : \"Denied\";\n\n            this.FindControl&lt;TextBox&gt;(\"ResultTextBox\").Text = result;\n\n        }\n}\n</code></pre> <ul> <li>Arquivo: <code>MainWindow.axaml</code></li> </ul> <pre><code>&lt;Window xmlns=\"https://github.com/avaloniaui\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        mc:Ignorable=\"d\" d:DesignWidth=\"800\" d:DesignHeight=\"500\"\n        x:Class=\"LoanApp.Avalonia.MainWindow\"\n        MinWidth=\"300\" MinHeight=\"490\"\n        Title=\"LoanApp.Avalonia\"&gt;\n    &lt;StackPanel Margin=\"10\"&gt;\n        &lt;TextBlock Text=\"Age:\"/&gt;\n        &lt;TextBox Name=\"AgeTextBox\" Margin=\"0,5,0,10\"/&gt;\n        &lt;TextBlock Text=\"Income:\"/&gt;\n        &lt;TextBox Name=\"IncomeTextBox\" Margin=\"0,5,0,10\"/&gt;\n        &lt;TextBlock Text=\"Credit Score:\"/&gt;\n        &lt;TextBox Name=\"ScoreTextBox\" Margin=\"0,5,0,10\"/&gt;\n        &lt;TextBlock Text=\"Amount:\"/&gt;\n        &lt;TextBox Name=\"AmountTextBox\" Margin=\"0,5,0,10\"/&gt;\n        &lt;TextBlock Text=\"Rate:\"/&gt;\n        &lt;TextBox Name=\"RateTextBox\" Margin=\"0,5,0,10\"/&gt;\n        &lt;TextBlock Text=\"Term:\"/&gt;\n        &lt;TextBox Name=\"TermTextBox\" Margin=\"0,5,0,10\"/&gt;\n        &lt;Button Content=\"Submit\" Click=\"SubmitButton_Click\"/&gt;\n        &lt;TextBlock Text=\"Result:\"/&gt;\n        &lt;TextBox Name=\"ResultTextBox\" Margin=\"0,5,0,10\" IsEnabled=\"false\"/&gt;\n    &lt;/StackPanel&gt;\n&lt;/Window&gt;\n</code></pre> <p>Agora s\u00f3 falta rodar:</p> <pre><code>dotnet run --project LoanApp.Avalonia\n</code></pre> <p>Para quem quiser saber mais: XAML</p> <p>Enjoy!</p>"}]}